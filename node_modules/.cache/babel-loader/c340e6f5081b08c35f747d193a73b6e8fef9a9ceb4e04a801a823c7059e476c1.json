{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhamidechi\\\\Desktop\\\\pr\\xE9sentation\\\\react-presentation\\\\src\\\\pages\\\\MemoPage.tsx\",\n  _s = $RefreshSig$();\nimport { useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MemoPage = () => {\n  _s();\n  const [counterOne, setCounterOne] = useState(0);\n  const [counterTwo, setCounterTwo] = useState(0);\n  const incrementCounterOne = () => {\n    setCounterOne(preValue => preValue + 1);\n  };\n  const incrementCounterTwo = () => {\n    setCounterTwo(preValue => preValue + 1);\n  };\n  const isPaire = useMemo(() => {\n    let i = 0;\n    while (i < 2000000000) i++;\n    return counterOne % 2 === 0;\n  }, [counterOne]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"useMemo is used to memoize a value so that it is only recalculated when the dependencies change. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 34\n      }, this), \"This is useful when a function or expression is expensive to compute and is used in a component. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 33\n      }, this), \" By using useMemo, the value is only calculated when needed and not on every render.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCounterOne,\n      children: [\"counter one \", counterOne]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isPaire ? \"paire\" : \"impaire\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCounterTwo,\n      children: [\"counter two \", counterTwo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoPage, \"Q+rmCkompOrqIaEAqxW0NrSiaiA=\");\n_c = MemoPage;\nvar _c;\n$RefreshReg$(_c, \"MemoPage\");","map":{"version":3,"names":["useMemo","useState","jsxDEV","_jsxDEV","MemoPage","_s","counterOne","setCounterOne","counterTwo","setCounterTwo","incrementCounterOne","preValue","incrementCounterTwo","isPaire","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mhamidechi/Desktop/prÃ©sentation/react-presentation/src/pages/MemoPage.tsx"],"sourcesContent":["import { useMemo, useState } from \"react\";\r\n\r\nexport const MemoPage = () => {\r\n  const [counterOne, setCounterOne] = useState(0);\r\n  const [counterTwo, setCounterTwo] = useState(0);\r\n\r\n  const incrementCounterOne = () => {\r\n    setCounterOne((preValue) => preValue + 1);\r\n  };\r\n\r\n  const incrementCounterTwo = () => {\r\n    setCounterTwo((preValue) => preValue + 1);\r\n  };\r\n\r\n  const isPaire = useMemo(() => {\r\n    let i = 0;\r\n    while (i < 2000000000) i++;\r\n    return counterOne % 2 === 0;\r\n  }, [counterOne]);\r\n\r\n  return (\r\n    <div className=\"memo\">\r\n      <h2>\r\n        useMemo is used to memoize a value so that it is only recalculated when\r\n        the dependencies change. <br />\r\n        This is useful when a function or expression is expensive to compute and\r\n        is used in a component. <br /> By using useMemo, the value is only\r\n        calculated when needed and not on every render.\r\n      </h2>\r\n      <button onClick={incrementCounterOne}>counter one {counterOne}</button>\r\n      <p>{isPaire ? \"paire\" : \"impaire\"}</p>\r\n      <button onClick={incrementCounterTwo}>counter two {counterTwo}</button>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMS,mBAAmB,GAAGA,CAAA,KAAM;IAChCH,aAAa,CAAEI,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EAC3C,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCH,aAAa,CAAEE,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EAC3C,CAAC;EAED,MAAME,OAAO,GAAGb,OAAO,CAAC,MAAM;IAC5B,IAAIc,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAG,UAAU,EAAEA,CAAC,EAAE;IAC1B,OAAOR,UAAU,GAAG,CAAC,KAAK,CAAC;EAC7B,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAKY,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBb,OAAA;MAAAa,QAAA,GAAI,mGAEuB,eAAAb,OAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,qGAEP,eAAAjB,OAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,wFAEhC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACLjB,OAAA;MAAQkB,OAAO,EAAEX,mBAAoB;MAAAM,QAAA,GAAC,cAAY,EAACV,UAAU;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU,eACvEjB,OAAA;MAAAa,QAAA,EAAIH,OAAO,GAAG,OAAO,GAAG;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACtCjB,OAAA;MAAQkB,OAAO,EAAET,mBAAoB;MAAAI,QAAA,GAAC,cAAY,EAACR,UAAU;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnE;AAEV,CAAC;AAACf,EAAA,CAhCWD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}